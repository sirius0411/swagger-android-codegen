package {{package}};

import android.util.Log;

import com.squareup.okhttp.Interceptor;
import com.squareup.okhttp.OkHttpClient;
import com.squareup.okhttp.Request;
import com.squareup.okhttp.Response;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import retrofit.GsonConverterFactory;
import retrofit.Retrofit;
import retrofit.RxJavaCallAdapterFactory;

/**
 * Network manager, use this class to get Retrofit api implements
 */
public final class NetManager {
    // debug channel control
    public static boolean DEBUG = false;
    // avalible debug channels
    public static final String[] DEBUG_CHANNELS = {""};
    // current debug channel
    public static final int CURRENT_DEBUG_CHANNEL_INDEX = 0;
    // protocol
    public static final String PROTOCOL = "{{{protocol}}}";
    // root url
    public static final String ROOT_URL = "{{{host}}}";
    // base path
    public static final String BASE_PATH = "{{{basePath}}}";

    private OkHttpClient mHttpClient;
    private Retrofit mRetrofit;
    private Map<Class<?>, Object> apiCache;

    private NetManager() {
        mHttpClient = new OkHttpClient();
        mHttpClient.networkInterceptors().add(new LoggingInterceptor());
        initRetrofit(getAPIRootUrl());
        apiCache = new HashMap<>();
    }

    private static class InstanceHolder {
        public static NetManager instance = new NetManager();
    }

    public static NetManager getInstance() {
        return InstanceHolder.instance;
    }

    /**
     * get the api implemented by Retrofit
     *
     * @param mApiClass the api definition interface's class
     * @return the implemented api
     */
    public <T> T getApi(Class<T> mApiClass) {
        if (apiCache.containsKey(mApiClass)) {
            return mApiClass.cast(apiCache.get(mApiClass));
        } else {
            T api = mRetrofit.create(mApiClass);
            apiCache.put(mApiClass, api);
            return api;
        }
    }

    /**
     * recycle the references
     */
    public void recycle() {
        mRetrofit = null;
        apiCache.clear();
        apiCache = null;
    }

    /**
     * change the apis' baseUrl
     *
     * @param baseUrl new base url
     */
    public void changeBaseUrl(String baseUrl) {
        apiCache.clear();
        initRetrofit(baseUrl);
    }

    /**
     * get base api root url (e.g. http://api.example.com/v1/)
     */
    public static String getAPIRootUrl() {
        String rootUrl = ROOT_URL;
        if (DEBUG) {
            // TODO process the root url to debug channel
        } else {
            // TODO additionally process
        }
        String result = PROTOCOL + "://" + rootUrl + BASE_PATH;
        //
        if (!result.endsWith("/")) {
            result += "/";
        }
        return result;
    }

    private void initRetrofit(String url) {
        mRetrofit = new Retrofit.Builder()
                .baseUrl(url)
                .client(mHttpClient)
                .addConverterFactory(GsonConverterFactory.create())
                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())
                .build();
    }

    class LoggingInterceptor implements Interceptor {
        @Override public Response intercept(Chain chain) throws IOException {
            Request request = chain.request();

            long t1 = System.nanoTime();
            if (DEBUG) {
                Log.i("RequestSend", String.format("Sending request %s on %s%n%s",
                        request.url(), chain.connection(), request.headers()));
            }

            Response response = chain.proceed(request);

            long t2 = System.nanoTime();
            if (DEBUG) {
                Log.i("ResponseReceive", String.format("Received response for %s in %.1fms with response code %s%n%s",
                        response.request().url(), (t2 - t1) / 1e6d, response.code(), response.headers()));
            }

            return response;
        }
    }
}